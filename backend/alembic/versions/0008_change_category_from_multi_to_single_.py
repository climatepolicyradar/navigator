"""change category from multi to single relationship

Revision ID: 0008
Revises: 0007
Create Date: 2022-05-03 09:58:39.936352

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy import String, SmallInteger
from sqlalchemy.sql import table, column, TableClause


# revision identifiers, used by Alembic.
revision = "0008"
down_revision = "0007"
branch_labels = None
depends_on = None

category_tbl: TableClause = table(
    "category",
    column("id", SmallInteger),
    column("name", String),
    column("description", String),
)

document_type_tbl: TableClause = table(
    "document_type",
    column("id", SmallInteger),
    column("name", String),
    column("description", String),
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("document_category")
    op.add_column("document", sa.Column("category_id", sa.Integer(), nullable=False))
    op.create_foreign_key(
        op.f("fk_document__category_id__category"),
        "document",
        "category",
        ["category_id"],
        ["id"],
    )
    # ### end Alembic commands ###

    # add data for the category lookup

    for category in ["Law", "Policy"]:
        op.execute(
            category_tbl.insert().values(
                name=category,
                description=category,
            )
        )

    # add data for the document type lookup

    # first, remove the incorrect data put there by 0002
    op.execute(document_type_tbl.delete())

    for document_type in [
        "Accord",
        "Act",
        "Action Plan",
        "Agenda",
        "Constitution",
        "Decision",
        "Decree",
        "Decree Law",
        "Directive",
        "Discussion Paper",
        "Edict",
        "EU Decision",
        "EU Directive",
        "EU Regulation",
        "Framework",
        "Law",
        "Law and plan",
        "Order",
        "Ordinance",
        "Plan",
        "Policy",
        "Programme",
        "Roadmap",
        "Regulation",
        "Resolution",
        "Royal Decree",
        "Rules",
        "Strategic Assessment",
        "Strategy",
        "Vision",
    ]:
        op.execute(
            document_type_tbl.insert().values(
                name=document_type,
                description=document_type,
            )
        )


def downgrade():
    op.execute(document_type_tbl.delete())
    op.execute(category_tbl.delete())

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_document__category_id__category"), "document", type_="foreignkey"
    )
    op.drop_column("document", "category_id")
    op.create_table(
        "document_category",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("type_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("document_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["document_id"],
            ["document.id"],
            name="fk_document_category__document_id__document",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["type_id"], ["category.id"], name="fk_document_category__type_id__category"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_document_category"),
    )
    # ### end Alembic commands ###
