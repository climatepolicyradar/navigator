version: '3.7'
services:
  backend_db:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_USER: ${BACKEND_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BACKEND_POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - db-data-backend:/var/lib/postgresql/data:cached
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${BACKEND_POSTGRES_USER}" ]
      interval: 5s
      timeout: 3s
      retries: 30

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python app/main.py
    tty: true
    volumes:
      - ./backend:/app/:cached
    ports:
      - 8888:8888
    environment:
      PYTHONPATH: .
      DATABASE_URL: ${BACKEND_DATABASE_URL}
    env_file:
      - .env
    depends_on:
      backend_db:
        condition: service_healthy
      opensearch-node1:
        condition: service_healthy
    healthcheck:
      test: curl -s -f backend:8888/health >/dev/null || exit 1
      interval: 5s
      timeout: 3s
      retries: 30

  frontend:
    #    user: node
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm run dev
    ports:
      - 3000:3000
    stdin_open: true
    environment:
      NODE_ENV: development
      API_URL: http://backend:8888/api/v1
      ADOBE_API_KEY: $ADOBE_API_KEY
      THEME: $THEME
      HOSTNAME: http://localhost:3000
      ROBOTS: false
    volumes:
      - ./frontend:/opt/node_app/app
      # bind-mounting these two files in will let you add packages during development without rebuilding.
      # Add the dependency inside the container with:
      #
      # docker-compose exec -w /opt/node_app frontend npm install --save <package name>
      # docker-compose exec -w /opt/node_app frontend npm install --save-dev <package name>
      #
      # and then nextjs will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build.
      - ./frontend/package.json:/opt/node_app/package.json
      - ./frontend/package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidentally getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /app/node_modules location.
      - ./notused:/opt/node_app/app/node_modules

  opensearch-node1:
    image: opensearchproject/opensearch:1.3.0
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600 # required for Performance Analyzer
    healthcheck:
      test: curl -u ${OPENSEARCH_USER}:${OPENSEARCH_PASSWORD} -s -f opensearch-node1:9200/_cat/health >/dev/null || exit 1
      interval: 5s
      timeout: 3s
      retries: 30

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:1.3.0
    container_name: opensearch-dashboards
    ports:
      - 5601:5601

  opensearch-test-loader:
    image: elasticdump/elasticsearch-dump
    container_name: opensearch-test-loader
    volumes:
      - ./backend:/app/:cached
    env_file:
      - .env
    depends_on:
      opensearch-node1:
        condition: service_healthy

volumes:
  db-data-backend:
  opensearch-data1:
