name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  IMAGE_TAG: ${{ github.sha }}
  BACKEND_TAR: docker-image/navigator_backend.tar
  FRONTEND_TAR: docker-image/navigator_frontend.tar

# https://github.com/marketplace/actions/docker-layer-caching
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use .env.example
        run:  cp .env.example .env 

      - name: Build 
        run: |
          docker-compose build
          docker images

      - name: Package Container Images
        run: |
          mkdir -p docker-image
          docker save -o ${BACKEND_TAR} navigator_backend
          docker save -o ${FRONTEND_TAR} navigator_frontend

      - uses: actions/upload-artifact@v1
        with:
          name: docker-image
          path: docker-image

  # test:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Use .env.example
  #       run:  cp .env.example .env 

  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: docker-image    

  #     - name: Load Images
  #       run: |
  #         docker load -i ${BACKEND_TAR}
  #         docker load -i ${FRONTEND_TAR}

  #     - name: Build docker-compose stack
  #       run:  make start
  #     - name: verify backend is up
  #       run:  curl http://localhost:8000/api/docs
  #     - name: Run backend tests
  #       run:  make test_backend && make test_backend_search
  #     - name: docker
  #       run: |
  #         docker-compose logs
  #         docker-compose ps
  #         docker ps -a
  #         ls -la
  #     - name: verify frontend is up
  #       run:  curl http://localhost:3000
  #     - name: Configure frontend test env
  #       run:  cp frontend/e2e/.env.example frontend/e2e/.env
  #     - name: Run frontend tests
  #       run:  make test_frontend
  #     - name: Log Dump
  #       if:   always()
  #       run:  docker-compose logs


  integration-tests-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: docker-image    

      - name: Load Images
        run: |
          docker load -i ${BACKEND_TAR}
          docker load -i ${FRONTEND_TAR}

      - uses: actions/checkout@v2

      - name: Run Integration Tests
        run: echo TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO

      - name: "Push Images if on dev/main if: github.ref == 'refs/heads/master'"
        run: |
          env
          .github/retag-and-push.sh navigator_backend ${IMAGE_TAG}
          .github/retag-and-push.sh navigator_frontend ${IMAGE_TAG}
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
