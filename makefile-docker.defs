# definitions for docker-based development

# ----------------------------------
# starting, stopping, migrating DB
# ----------------------------------
start_containers:
	# Build and run containers
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

start_frontend:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d frontend

show_logs:
	docker-compose logs -f

start: start_containers migrations upgrade_all_dbs

stop:
	docker-compose stop

remove_volumes:
	docker-compose down -v

up:
	# docker-compose up, without -d
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# ----------------------------------
# database maintenance
# ----------------------------------

migrations_docker_backend:
	# Create initial data in database
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 app/initial_data.py

cleanup_tables:
	# Cleanup duplicate data
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 scripts/cleanup_lookups/cleanup_lookups.py

add_unique_ids:
	# Cleanup duplicate data
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 scripts/add_unique_ids/add_unique_ids.py

migrations: migrations_docker_backend

%:
	@:

new_migration_backend:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend alembic revision --autogenerate -m "$(filter-out $@,$(MAKECMDGOALS))"

refresh_all_dbs:
	docker-compose down -v
	make start

# ----------------------------------
# building images
# ----------------------------------
build_bats:
	docker build bats -t bats-with-helpers:latest

build_backend:
	docker-compose build --no-cache backend

build_frontend:
	docker-compose build --no-cache frontend

build: build_backend build_frontend

# ----------------------------------
# testing
# ----------------------------------

test_bashscripts: build_bats
	docker run --rm -v "${PWD}/.github:/code" bats-with-helpers:latest /code/tests/test_retag_and_push.bats

test_frontend:
	# TODO: setup a proper test user for cypress
	cd frontend/e2e && docker-compose up --exit-code-from cypress

setup_test_search_index:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend curl -XDELETE -u "${OPENSEARCH_USER}:${OPENSEARCH_PASSWORD}" ${OPENSEARCH_URL}/${OPENSEARCH_INDEX_PREFIX}* --insecure
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm opensearch-test-loader multielasticdump --direction=load --input=/app/tests/data/ --output=${OPENSEARCH_URL} --ignoreType=template

test_backend_search: setup_test_search_index
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -m 'search'

test_backend_cors:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -m 'cors'

test_backend:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -v -m 'not search'

test_backend_unit:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -v tests/unit

test: test_backend test_frontend

# ----------------------------------
# tasks
# ----------------------------------

# Check OpenSearch running on localhost
check_opensearch_local:
	curl -XGET http://localhost:9200 -u 'admin:admin' --insecure

postgres_dump:
	docker-compose run -v ${PWD}/backend:/app/data --rm backend_db pg_dump -d ${BACKEND_DATABASE_URL} --data-only -F c --file /app/data/backend_db_dump.dump
